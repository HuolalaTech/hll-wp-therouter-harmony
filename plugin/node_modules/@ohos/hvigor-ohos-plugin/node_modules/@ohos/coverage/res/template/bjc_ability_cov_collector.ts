class EntryAbility extends UIAbility {
  onDestroy(): void {
    this.__BJC_COV_CollectData();
  }
  onDump(params: Array<string>): Array<string> {
    this.__BJC_COV_CollectData();
    return params;
  }
  private __BJC_COV_CollectData() {
    function getCurrentFormattedTime(): string {
      const date = new Date();
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      const seconds = date.getSeconds().toString().padStart(2, '0');
      const milliseconds = date.getMilliseconds().toString().padStart(3, '0');
      return `${year}${month}${day}_${hours}${minutes}${seconds}_${milliseconds}`;
    }
    const MAX = 10;
    const cacheDir = this.context.cacheDir;
    let fileList = bjc_fs.listFileSync(cacheDir);
    let count = 0;
    let earliestFile = null;
    fileList.forEach((file) => {
      if (!earliestFile || file < earliestFile) {
        earliestFile = file;
      }
      count++;
    });
    if (count === MAX) {
      try {
        bjc_fs.unlinkSync(cacheDir + '/' + earliestFile);
      } catch (e) {
        console.log('unlink coverage file error: ', e)
      }
    }
    let covFile = this.context.cacheDir + `/bjc_cov_${getCurrentFormattedTime()}.json`;
    let file = bjc_fs.openSync(covFile, bjc_fs.OpenMode.READ_WRITE | bjc_fs.OpenMode.CREATE);
    if (globalThis['__coverage__']) {
      bjc_fs.writeSync(file.fd, JSON.stringify(globalThis['__coverage__']));
    }
    bjc_fs.closeSync(file);
  }
}
