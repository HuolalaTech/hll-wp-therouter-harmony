"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReportForHvigorw = void 0;
const fs = require("fs-extra");
const log4js = require("log4js");
const path = require("path");
const report_1 = require("./report");
const standardErrorMessage_1 = require("./error/standardErrorMessage");
log4js.configure({
    appenders: {
        console: { type: 'console' },
    },
    categories: {
        default: { appenders: ['console'], level: 'all' },
    },
});
const consoleLogger = log4js.getLogger('console');
/**
 * 功能：生成报告对外接口
 * @param {string} projectPath 源码工程路径
 * @param {string} reportPath 报告生成路径
 * @param {string} coveragePath 覆盖率文件路径，多个文件路径之间以#拼接
 */
async function generateReportForHvigorw(projectPath, reportPath, coveragePath) {
    let valid = validParam(projectPath, reportPath, coveragePath);
    if (!valid) {
        return;
    }
    let coveragePaths = coveragePath.split('#');
    for (const item of coveragePaths) {
        if (!fs.existsSync(item)) {
            consoleLogger.error((0, standardErrorMessage_1.getFormattedErrorMsg)('SOME_COVERAGE_FILE_DOES_NOT_EXIST'));
            return;
        }
    }
    const initPathArr = coveragePaths.filter((item) => item.indexOf('init_coverage.json') != -1);
    let etsCoverageDataPath = path.join(path.dirname(initPathArr[0]), 'etsCoverageData.json');
    const formattedProjectPath = projectPath.replace(/\\/g, '/');
    let initCoverageData = (0, report_1.getInitCoverageData)(coveragePaths, formattedProjectPath);
    let jsCoverageData = (0, report_1.getjsCoverageData)(coveragePaths, formattedProjectPath);
    let covData = (0, report_1.mergeCoverageData)(initCoverageData, jsCoverageData, report_1.targetKeyArr);
    fs.writeFileSync(etsCoverageDataPath, JSON.stringify(covData));
    (0, report_1.report)(projectPath, reportPath, etsCoverageDataPath);
}
exports.generateReportForHvigorw = generateReportForHvigorw;
function validParam(projectPath, reportPath, coveragePath) {
    if (!fs.existsSync(projectPath)) {
        consoleLogger.error((0, standardErrorMessage_1.getFormattedErrorMsg)('PROJECT_PATH_DOES_NOT_EXIST'));
        return false;
    }
    if (!reportPath) {
        consoleLogger.error((0, standardErrorMessage_1.getFormattedErrorMsg)('REPORT_PATH_DOES_NOT_EXIST'));
        return false;
    }
    if (!coveragePath) {
        consoleLogger.error((0, standardErrorMessage_1.getFormattedErrorMsg)('COVERAGE_FILE_DOES_NOT_EXIST'));
        return false;
    }
    return true;
}
