"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultBlackList = exports.checkBlackWhiteList = exports.getBlackList = exports.getWhiteList = exports.needToFilter = exports.getCoverageFilterJson5 = void 0;
const path = require("path");
const fs = require("fs");
const JSON5 = require("json5");
const COVERAGE_FILTER_JSON5 = 'coverage-filter.json5';
const BUILD = 'build';
const DOT_TEST = '.test';
const SRC = 'src';
const OHOSTEST = 'ohosTest';
const TEST = 'test';
const MOCK = 'mock';
const OH_MODULES = 'oh_modules';
const UTF_8 = 'utf-8';
const BLACK_SLASH_REGEX = /\\/g;
const SLASH = '/';
function getCoverageFilterJson5(projectPath) {
    let coverageFilterJsonPath = path.join(projectPath, COVERAGE_FILTER_JSON5);
    if (!fs.existsSync(coverageFilterJsonPath)) {
        return { include: [], exclude: [] };
    }
    let coverageFilterJson = JSON5.parse(fs.readFileSync(coverageFilterJsonPath, UTF_8));
    return { include: coverageFilterJson.include, exclude: coverageFilterJson.exclude };
}
exports.getCoverageFilterJson5 = getCoverageFilterJson5;
function needToFilter(currentFilePath, defaultBlackList, blackList, whiteList) {
    if (canFindAny(currentFilePath, defaultBlackList)) {
        return true;
    }
    if (canFindAny(currentFilePath, whiteList)) {
        return false;
    }
    return canFindAny(currentFilePath, blackList);
}
exports.needToFilter = needToFilter;
function canFindAny(currentFilePath, list) {
    return list.some(filePath => currentFilePath.includes(filePath));
}
function getWhiteList(coverageFilterJson5) {
    return coverageFilterJson5.include ? replaceAllBlackSlash(coverageFilterJson5.include) : [];
}
exports.getWhiteList = getWhiteList;
function getBlackList(coverageFilterJson5) {
    return coverageFilterJson5.exclude ? replaceAllBlackSlash(coverageFilterJson5.exclude) : [];
}
exports.getBlackList = getBlackList;
function checkBlackWhiteList(blackList, whiteList) {
    if (whiteList.some(list => blackList.includes(list))) {
        throw new Error('The same path defined in include and exclude list in coverage-filter.json5.');
    }
}
exports.checkBlackWhiteList = checkBlackWhiteList;
function getDefaultBlackList(projectPath, modulePath) {
    const moduleBuildPath = path.join(modulePath, BUILD);
    const moduleTestPath = path.join(modulePath, DOT_TEST);
    const ohosTestPath = path.join(SRC, OHOSTEST);
    const localTestPath = path.join(SRC, TEST);
    const moduleMockPath = path.join(SRC, MOCK);
    const projectOhModulesPath = path.join(projectPath, OH_MODULES);
    const moduleOhModulesPath = path.join(modulePath, OH_MODULES);
    let defaultBlackList = [moduleBuildPath, moduleTestPath, ohosTestPath, localTestPath, moduleMockPath, projectOhModulesPath, moduleOhModulesPath];
    ;
    return replaceAllBlackSlash(defaultBlackList);
}
exports.getDefaultBlackList = getDefaultBlackList;
function replaceAllBlackSlash(pathList) {
    return pathList.map(path => path.replace(BLACK_SLASH_REGEX, SLASH));
}
