import { AdaptorErrorMessage } from '../error/type.js';
import { HvigorErrorInfo } from '../logger/HvigorErrorInfo.js';
import { THvigorErrorInfo } from '../types/ErrorLogTypes.js';
export declare class ErrorUtil {
    /**
     * 将传入的object对象 实例化成HvigorErrorInfo
     * @param error
     * @returns
     */
    static getRealError(error: any): HvigorErrorInfo;
    /**
     * 将传入的object对象 实例化成三段是
     * @param {Omit<THvigorErrorInfo, "description"> & {description?: string}} error 不传description时，错误码描述信息按类别展示
     * @returns {string}
     */
    static combinePhase(error: Omit<THvigorErrorInfo, 'description'> & {
        description?: string;
    }): string;
    /**
     * 从错误码截取错误归属码
     * @param {string} errorCode
     * @returns {string}
     */
    static getErrorTypeCodeFromErrorCode(errorCode: string): string | undefined;
    /**
     * 兼容八位错误码之前的接口：
     * 对于已知错误码只包含一条错误信息的数组，使用此函数提取第一个
     * @param adaptorErrorMessages 适配器错误消息数组
     * @returns 返回第一个AdaptorErrorMessage，如果数组为空，则返回一个空的AdaptorErrorMessage
     */
    static getFirstErrorAdaptorMessage(adaptorErrorMessages: AdaptorErrorMessage[]): AdaptorErrorMessage;
    /**
     * 判断错误是不是适配器错误
     * @param {Error} error
     * @returns {boolean}
     */
    static isAdaptorError(error: Error): boolean;
}
